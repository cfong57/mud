#include <mudlib.h>

inherit OBJECT;

mixed a = ({});
int *b = ({});
int *c = ({});

void clear_progress()
{
  for(int j = 0; j < 1200; j++)
  {
    b[j] += 0;
  }
  for(int k = 0; k < 1600; k++)
  {
    c[k] += 0;
  }
  a += ({ b, c }); //a[x][y] coordinate system
}
 
int dirmap_command(string cmd)
{
  string *tmp;
  mapping themap = ([]);
  int i = 0;
  if(cmd)
  {
    tmp = get_dir(cmd);
    if(sizeof(tmp))
    {
      foreach(string file in tmp)
      {
        //object ob;     if we wanted to do stuff with the files
        //ob = load_object(cmd + file);
        themap[i] = file;
        i++;
      }
      //write_file("/u/a/allanon/logs/temp_log", ""+identify(themap)+"", 1);
      message("info","Succeeded at mapping "+cmd+".\n",this_player());
    }
    else
    {
      message("info","Huh, failed to load directory.\n",this_player());	  
    }
    return 1;
  }
  return notify_fail("Usage: 'dirmap <directory>'.\n");
}

int worldmap_command(string cmd)
{
  //1600 x 1200 = 1920000
  object room;
  int x;
  int y;
  if(cmd)
  {
	sscanf(cmd,"%d %d",x,y);
	if(x >= 0 && y >= 0)
	{
	  for(int i = y; i < y + 10; i++)
      {
        for(int j = x; j < x + 10; j++)
        {
	      room = load_object(sprintf("/d/world/rooms/%d,%d.world",j,i));
          if(!room)
          {       
            ;//message("info","Failed to find a room at "+j+","+i+".\n",
            //this_player());  spammy, only need for debugging
          }
          else
          {
	        a[j][i] = 1;
            if(room->query_outside() == "?")
            {
	          //message("info",""+identify(room->query_coordinates())+" "+
	          //""+room->query_outside()+" ",
	          //this_player());    more debugging
	          write_file("/u/a/allanon/logs/temp_log",
	          ""+identify(room->query_coordinates())+" :\n");
            }
          }
        }
      }
      message("info","Finished mapping 10x10 world map starting at "+
      ""+x+","+y+".\n",this_player());
    }
    else
    {
	  message("info","Failed to get a positive x and/or y.\n",this_player());   
    }
    return 1;
  }
  return notify_fail("Usage: 'worldmap <x> <y>'.\n");
}

/*
int allworldmap_command(string cmd)
{
  //1600 x 1200 = 1920000
  if(!cmd)
  {
    for(int i = 0; i < 1201; i += 10)
    {
      for(int j = 0; j < 1601; j += 10)
      {
        call_out("worldmap_command",j,""+j+" "+i+"");
      }
    }
    return 1;
  }
  return notify_fail("No args.\n");	
}

void STOP_ME()
{
  remove_call_out();	
}*/

int progress_command(string cmd)
{
  if(cmd == "wipe")
  {
    clear_progress();
    message("info","Wiped the progress array.\n",this_player());	
    return 1;  
  }
  else if(!cmd)
  {
	int todo = 0;
	int startx = 0;
	int starty = 0;
	int flag = 0;
    for(int i = 0; i < sizeof(c); i++)
    {
      for(int j = 0; j < sizeof(b); j++)
      {
	    if (a[j][i] == 0)
	    {
		  todo++;
		  if(flag == 0) //only grab these values once
		  {
		    startx = j;
		    starty = i;
		    flag = 1;	  
		  }
	    }
      }
    }
    message("info","Found "+todo+" unmapped rooms, starting at "+
    ""+startx+","+starty+".\n",this_player());
    return 1;
  }
  else
  {
    return notify_fail("No args, or 'progress wipe'.\n");	  
  }	
}

void extra_init()
{
  add_action("dirmap_command","dirmap");
  add_action("worldmap_command","worldmap");
  //add_action("allworldmap_command","allworldmap");
  add_action("progress_command","progress");
}

void extra_create()
{
  set_short("The Mapper(tm)");
  set_long(wrap("This object is used to generate a mapping of every file in a "+
  "given directory. It doesn't work for the world map because 99.9% of those "+
  "rooms are virtual. Note that this will only work on directories that you "+
  "would normally have access to anyway. Command is 'dirmap <directory>.\n"+
  "There is also experimental 'worldmap <x> <y>' command which attempts to "+
  "generate coordinates of '?' on the world map, scanning a 10x10 block "+
  "starting at x,y. Not currently supported: 'allworldmap' attempts to do "+
  "this to cover the entire world map. 'progress' shows how many more rooms "+
  "are left to map, and 'progress wipe' clears the progress map.\n"));
  set_name("the mapper");
  set_id( ({ "the mapper", "mapper" }) );
  set_mass(1);
  set_bulk(1);
  clear_progress();
}