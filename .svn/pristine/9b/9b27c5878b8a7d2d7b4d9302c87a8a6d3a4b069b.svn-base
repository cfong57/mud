#define A1 CHESSBOARD["A1"]
#define B1 CHESSBOARD["B1"]
#define C1 CHESSBOARD["C1"]
#define D1 CHESSBOARD["D1"]
#define E1 CHESSBOARD["E1"]
#define F1 CHESSBOARD["F1"]
#define G1 CHESSBOARD["G1"]
#define H1 CHESSBOARD["H1"]
#define A2 CHESSBOARD["A2"]
#define B2 CHESSBOARD["B2"]
#define C2 CHESSBOARD["C2"]
#define D2 CHESSBOARD["D2"]
#define E2 CHESSBOARD["E2"]
#define F2 CHESSBOARD["F2"]
#define G2 CHESSBOARD["G2"]
#define H2 CHESSBOARD["H2"]
#define A3 CHESSBOARD["A3"]
#define B3 CHESSBOARD["B3"]
#define C3 CHESSBOARD["C3"]
#define D3 CHESSBOARD["D3"]
#define E3 CHESSBOARD["E3"]
#define F3 CHESSBOARD["F3"]
#define G3 CHESSBOARD["G3"]
#define H3 CHESSBOARD["H3"]
#define A4 CHESSBOARD["A4"]
#define B4 CHESSBOARD["B4"]
#define C4 CHESSBOARD["C4"]
#define D4 CHESSBOARD["D4"]
#define E4 CHESSBOARD["E4"]
#define F4 CHESSBOARD["F4"]
#define G4 CHESSBOARD["G4"]
#define H4 CHESSBOARD["H4"]
#define A5 CHESSBOARD["A5"]
#define B5 CHESSBOARD["B5"]
#define C5 CHESSBOARD["C5"]
#define D5 CHESSBOARD["D5"]
#define E5 CHESSBOARD["E5"]
#define F5 CHESSBOARD["F5"]
#define G5 CHESSBOARD["G5"]
#define H5 CHESSBOARD["H5"]
#define A6 CHESSBOARD["A6"]
#define B6 CHESSBOARD["B6"]
#define C6 CHESSBOARD["C6"]
#define D6 CHESSBOARD["D6"]
#define E6 CHESSBOARD["E6"]
#define F6 CHESSBOARD["F6"]
#define G6 CHESSBOARD["G6"]
#define H6 CHESSBOARD["H6"]
#define A7 CHESSBOARD["A7"]
#define B7 CHESSBOARD["B7"]
#define C7 CHESSBOARD["C7"]
#define D7 CHESSBOARD["D7"]
#define E7 CHESSBOARD["E7"]
#define F7 CHESSBOARD["F7"]
#define G7 CHESSBOARD["G7"]
#define H7 CHESSBOARD["H7"]
#define A8 CHESSBOARD["A8"]
#define B8 CHESSBOARD["B8"]
#define C8 CHESSBOARD["C8"]
#define D8 CHESSBOARD["D8"]
#define E8 CHESSBOARD["E8"]
#define F8 CHESSBOARD["F8"]
#define G8 CHESSBOARD["G8"]
#define H8 CHESSBOARD["H8"]

#define R "%^BOLD%^%^RED%^R%^RESET%^" //enemy rook
#define N "%^BOLD%^%^RED%^N%^RESET%^" //enemy knight
#define B "%^BOLD%^%^RED%^B%^RESET%^" //enemy bishop
#define Q "%^BOLD%^%^RED%^Q%^RESET%^" //enemy queen
#define K "%^BOLD%^%^RED%^K%^RESET%^" //enemy king
#define P "%^BOLD%^%^RED%^P%^RESET%^" //enemy pawn
#define r "%^BOLD%^%^MAGENTA%^r%^RESET%^" //player rook
#define n "%^BOLD%^%^MAGENTA%^n%^RESET%^" //player knight
#define b "%^BOLD%^%^MAGENTA%^b%^RESET%^" //player bishop
#define q "%^BOLD%^%^MAGENTA%^q%^RESET%^" //player queen
#define k "%^BOLD%^%^MAGENTA%^k%^RESET%^" //player king
#define p "%^BOLD%^%^MAGENTA%^p%^RESET%^" //player pawn

#define LINE " |-+-+-+-+-+-+-+-|\n"

string BOARD =
  "  A B C D E F G H\n"+
  " ,---------------.\n"+
  "8|"+R+"|"+N+"|"+B+"|"+Q+"|"+K+"|"+B+"|"+N+"|"+R+"|\n"+
  ""+LINE+""+
  "7|"+P+"|"+P+"|"+P+"|"+P+"|"+P+"|"+P+"|"+P+"|"+P+"|\n"+
  ""+LINE+""+
  "6| | | | | | | | |\n"+
  ""+LINE+""+
  "5| | | | | | | | |\n"+
  ""+LINE+""+
  "4| | | | | | | | |\n"+
  ""+LINE+""+
  "3| | | | | | | | |\n"+
  ""+LINE+""+
  "2|"+p+"|"+p+"|"+p+"|"+p+"|"+p+"|"+p+"|"+p+"|"+p+"|\n"+
  ""+LINE+""+
  "1|"+r+"|"+n+"|"+b+"|"+q+"|"+k+"|"+b+"|"+n+"|"+r+"|\n"+
  "`---------------'\n";

mapping CHESSBOARD = ([
"A8" : 0, "B8" : 0, "C8" : 0, "D8" : 0, "E8" : 0, "F8" : 0, "G8" : 0, "H8" : 0,
"A7" : 0, "B7" : 0, "C7" : 0, "D7" : 0, "E7" : 0, "F7" : 0, "G7" : 0, "H7" : 0,
"A6" : 0, "B6" : 0, "C6" : 0, "D6" : 0, "E6" : 0, "F6" : 0, "G6" : 0, "H6" : 0,
"A5" : 0, "B5" : 0, "C5" : 0, "D5" : 0, "E5" : 0, "F5" : 0, "G5" : 0, "H5" : 0,
"A4" : 0, "B4" : 0, "C4" : 0, "D4" : 0, "E4" : 0, "F4" : 0, "G4" : 0, "H4" : 0,
"A3" : 0, "B3" : 0, "C3" : 0, "D3" : 0, "E3" : 0, "F3" : 0, "G3" : 0, "H3" : 0,
"A2" : 0, "B2" : 0, "C2" : 0, "D2" : 0, "E2" : 0, "F2" : 0, "G2" : 0, "H2" : 0,
"A1" : 0, "B1" : 0, "C1" : 0, "D1" : 0, "E1" : 0, "F1" : 0, "G1" : 0, "H1" : 0
]);

//0 for empty square
//1 for space under attack by player 1 (magenta)
//2 for space under attack by player 2 (red)

object *players = ({}); //alternative to making a chess shadow

int game_in_progress = 0;

int query_game_in_progress()
{
  return game_in_progress;	
}

int reset_command(string str)
{
  if(str == "board")
  {
    foreach(string str in keys(CHESSBOARD))
    {
	  if(objectp(CHESSBOARD[str]))
	  {
	    CHESSBOARD[str]->remove();	  
	  }
	  CHESSBOARD[str] = 0;
    }
    CHESSBOARD["A1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["A1"]->initialize("magenta rook");
    CHESSBOARD["B1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["B1"]->initialize("magenta knight");	
    CHESSBOARD["C1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["C1"]->initialize("magenta bishop");	
    CHESSBOARD["D1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["D1"]->initialize("magenta queen");	
    CHESSBOARD["E1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["E1"]->initialize("magenta king");	
    CHESSBOARD["F1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["F1"]->initialize("magenta bishop");	
    CHESSBOARD["G1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["G1"]->initialize("magenta knight");	
    CHESSBOARD["H1"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["H1"]->initialize("magenta rook"); 
    CHESSBOARD["A2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["A2"]->initialize("magenta pawn");
    CHESSBOARD["B2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["B2"]->initialize("magenta pawn");	
    CHESSBOARD["C2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["C2"]->initialize("magenta pawn");	
    CHESSBOARD["D2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["D2"]->initialize("magenta pawn");	
    CHESSBOARD["E2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["E2"]->initialize("magenta pawn");	
    CHESSBOARD["F2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["F2"]->initialize("magenta pawn");	
    CHESSBOARD["G2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["G2"]->initialize("magenta pawn");	
    CHESSBOARD["H2"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["H2"]->initialize("magenta pawn");
    CHESSBOARD["A7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["A7"]->initialize("red pawn");
    CHESSBOARD["B7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["B7"]->initialize("red pawn");	
    CHESSBOARD["C7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["C7"]->initialize("red pawn");	
    CHESSBOARD["D7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["D7"]->initialize("red pawn");	
    CHESSBOARD["E7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["E7"]->initialize("red pawn");	
    CHESSBOARD["F7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["F7"]->initialize("red pawn");	
    CHESSBOARD["G7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["G7"]->initialize("red pawn");	
    CHESSBOARD["H7"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["H7"]->initialize("red pawn");    
    CHESSBOARD["A8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["A8"]->initialize("red rook");
    CHESSBOARD["B8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["B8"]->initialize("red knight");	
    CHESSBOARD["C8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["C8"]->initialize("red bishop");	
    CHESSBOARD["D8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["D8"]->initialize("red queen");	
    CHESSBOARD["E8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["E8"]->initialize("red king");	
    CHESSBOARD["F8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["F8"]->initialize("red bishop");	
    CHESSBOARD["G8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["G8"]->initialize("red knight");	
    CHESSBOARD["H8"] = new("/u/a/allanon/chess/chesspiece.c");
    CHESSBOARD["H8"]->initialize("red rook"); 	
    message("chess","The chessboard has been reset.\n",this_object());  
    return 1;
  }
}

int play_command(string str)
{
  if(str == "1")
  {
    return 1;
  }
  else if(str == "2")
  {
    return 1;	  
  }
  else if(str == "npc")
  {
    return 1;	  
  }
  else
  {
    return notify_fail("Usage: 'play <1|2|npc>'\n");	  
  }
}

int move_command(string str)
{
  if(str)
  {
    return 1;
  }
  return notify_fail("Usage: move <piece> <dir> <num>\n");
}

int view_command(string str)
{
  if(!str)
  {
    message("chess","\n"+BOARD+"",this_player());
    return 1;
  }
  return notify_fail("Usage: 'view'\n");
}

int giveup_command(string str)
{
  if(!str)
  {	  
    return 1;
  }
  return notify_fail("Usage: 'giveup'\n");
}

int nocontest_command(string str)
{
  if(!str)
  {	  
    return 1;
  }
  return notify_fail("Usage: 'nocontest'\n");
}

void extra_init()
{
  add_action("play_command","play");
  add_action("move_command","move");
  add_action("view_command","view");
  add_action("giveup_command","giveup");
  add_action("reset_command","reset");
  add_action("nocontest_command","nocontest");
}